// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//models

model Organization {
  id          String       @id // This will be the organizationId from Stytch member response
  name        String
  slug        String      
  logoUrl     String?
  members     User[]
  departments Department[]
  projects    Project[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id                             String                  @id
  name                           String
  email                          String                
  role                           String
  status                         String
  organization                   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId                 String
  department                     Department?             @relation("DepartmentMembers", fields: [departmentId], references: [id])
  departmentId                   String?
  managedDepartment              Department?             @relation("DepartmentManager")
  memberOfDepartmentProjects     DepartmentProject[]     @relation("DepartmentProjectMembers")
  assignedDepartmentProjectTasks DepartmentProjectTask[] @relation("AssignedDepartmentProjectTasks")
  managedProjects                Project[]               @relation("ProjectManager")
  memberOfProjects               Project[]               @relation("ProjectMembers")
  assignedProjectTasks           ProjectTask[]           @relation("AssignedProjectTasks")
  createdAt                      DateTime                @default(now())
  updatedAt                      DateTime                @updatedAt

  @@index([organizationId])
  @@index([departmentId])
}

model Department {
  id             String              @id @default(uuid())
  name           String
  description    String
  slug           String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  manager        User?                @relation("DepartmentManager", fields: [managerId], references: [id])
  managerId      String?              @unique
  members        User[]              @relation("DepartmentMembers")
  projects       DepartmentProject[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@index([organizationId])
  @@index([managerId])
}

model DepartmentProject {
  id           String                  @id @default(uuid())
  name         String
  description    String
  department   Department              @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  tasks        DepartmentProjectTask[]
  members      User[]                  @relation("DepartmentProjectMembers")
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  @@index([departmentId])
}

model DepartmentProjectTask {
  id          String            @id @default(uuid())
  title       String
  description String?
  status      String
  project     DepartmentProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignees   User[]            @relation("AssignedDepartmentProjectTasks")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([projectId])
}

model Project {
  id             String        @id @default(uuid())
  name           String
  description    String?
  status         String        @default("private")
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  manager        User          @relation("ProjectManager", fields: [managerId], references: [id])
  managerId      String
  members        User[]        @relation("ProjectMembers")
  tasks          ProjectTask[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([organizationId])
  @@index([managerId])
}

model ProjectTask {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("todo")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignees   User[]   @relation("AssignedProjectTasks")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}
